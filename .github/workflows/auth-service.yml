name: Build, test and publish Auth service

on:
  push:
    paths:
      - 'auth/**'

env:
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  REGISTRY_USER: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ github.token }}

jobs:
  auth-service:
    runs-on: ubuntu-20.04
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b

      - name: Build and Test
        uses: gradle/gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee
        with:
          arguments: :auth:build

        #      - name: Publish
        #        id: publish
        #        uses: gradle/gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee
        #        env:
        #          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        #        with:
        #          arguments: :auth:publish

        #      - name: Echo outputs
        #        run: echo "${{ toJSON(steps.publish.outputs) }}"

      - name: Install latest podman
        run: bash .github/install_latest_podman.sh

      # Build image using Buildah action
      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          image: weesnerdevelopment
          tags: ${{ github.sha }} auth auth:latest
          containerfiles: auth/Dockerfile

      # Push the image to GHCR (Image Registry)
      - name: Push To Github Container Registry
        uses: ./
        id: push
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          extra-args: --disable-content-trust

      - name: Echo outputs
        run: echo "${{ toJSON(steps.push.outputs) }}"
